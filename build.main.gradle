// build.main.gradle


import groovy.json.JsonOutput
import groovy.json.JsonSlurper

ext.cachedJdList = null

project.version = project.hasProperty("tag") ? project.tag : "dev"

group = project.maven_group

base {
    archivesName = project.archives_base_name
}

// -------------------- VERSION HANDLING --------------------
def generateMcVersionMacros(List<String> versions, int selectedIndex) {
    def sb = new StringBuilder("# DO NOT TOUCH THIS FILE, it is handled by the build script\n")
    versions.eachWithIndex { v, i ->
        sb << "MC_${v.replace('.', '_')}=${i}\n"
        if (i == selectedIndex) sb << "MC_VER=${i}\n"
    }
    new File(project.projectDir, "build.properties").text = sb.toString()
    println "📝 build.properties written with ${versions.size()} versions (MC_VER=${selectedIndex}) for Minecraft ${project.minecraft_version}."
    println "Available versions: ${versions.join(', ')}"
    println "Selected version: ${versions[selectedIndex]} (index ${selectedIndex})"
    println "Java version for Minecraft ${project.minecraft_version}: ${getJavaVersionForMinecraft(project.minecraft_version).majorVersion}"
    println "Build properties file written to: ${new File(project.projectDir, "build.properties").absolutePath}"
    println sb.toString()
}

static def parseVersion(String v) {
    def parts = v.tokenize('.').collect { it.toInteger() }
    while (parts.size() < 3) parts += 0
    return parts[0] * 10000 + parts[1] * 100 + parts[2]
}

static def getJavaVersionForMinecraft(String mcVersion) {
    def v = parseVersion(mcVersion)
    if (v >= parseVersion("1.21.0")) return JavaVersion.VERSION_21
    if (v >= parseVersion("1.20.0")) return JavaVersion.VERSION_17
    if (v >= parseVersion("1.17.0")) return JavaVersion.VERSION_16
    return JavaVersion.VERSION_1_8
}

def effectiveJavaVersion = getJavaVersionForMinecraft(project.minecraft_version)

tasks.register('generatePreprocessorDefinitions') {
    doLast {
        def mcVersion = project.minecraft_version
        def parsed = new JsonSlurper().parse(new URL("https://meta.fabricmc.net/v2/versions/game"))
        def versions = parsed.findAll { it.stable }*.version.sort { a, b ->
            def parse = { it.tokenize('.').collect { it as int } }
            def pa = parse(a)
            def pb = parse(b)
            for (int i = 0; i < Math.max(pa.size(), pb.size()); i++) {
                def va = i < pa.size() ? pa[i] : 0
                def vb = i < pb.size() ? pb[i] : 0
                if (va != vb) return va <=> vb
            }
            return 0
        }
        def index = versions.indexOf(mcVersion)
        if (index == -1) throw new GradleException("❌ Minecraft version ${mcVersion} is not a known Fabric release.")
        generateMcVersionMacros(versions, index)
    }
}
tasks.named("compileJava") { dependsOn generatePreprocessorDefinitions }

// -------------------- MANIFOLD COMPILER ARGS --------------------
tasks.withType(JavaCompile).configureEach {
    println "🔧 Configuring JavaCompile task for Manifold and Minecraft versions..."
    // Read MC version macros from build.properties and add as compiler arguments
    def propsFile = file("build.properties")
    def macroArgs = []
    if (propsFile.exists()) {
        def props = new Properties()
        propsFile.withInputStream { props.load(it) }
        props.each { k, v ->
            macroArgs += "-A${k}=${v}"
        }
    }
    // Set compiler arguments for Manifold and Minecraft versions
    def mcVer = project.minecraft_version
    def versionInt = mcVer.tokenize('.').collect { it.padLeft(2, '0') }.join('').toInteger()
    println "🔧 Setting Manifold compiler arguments for Minecraft version ${mcVer} (int: ${versionInt})"
    options.compilerArgs += [
            "-Xplugin:Manifold",
            "-Xlint:unchecked",
            "-Xlint:deprecation"
    ] + macroArgs
    println "🔧 Compiler arguments: ${options.compilerArgs.join(' ')}"
    // Set the Java release version according to the effective Minecraft version
    options.release = Integer.parseInt(effectiveJavaVersion.majorVersion)
}

// -------------------- Dependency Resolution --------------------
// This function resolves the correct Fabric loader and API versions for the given Minecraft version.
def resolveFabricVersions(String mcVersion) {
    // Load jdlist.txt from Fabric Maven if not cached yet
    if (project.ext.cachedJdList == null) {
        println "🌐 Loading jdlist.txt from Fabric Maven..."
        project.ext.cachedJdList = new URL("https://maven.fabricmc.net/jdlist.txt").text.readLines()
    } else {
        println "⚡ Using cached jdlist.txt"
    }

    def jdList = project.ext.cachedJdList

    // Get the loader version from Fabric meta API
    def loader = new JsonSlurper().parse(new URL("https://meta.fabricmc.net/v2/versions/loader/${mcVersion}"))[0].loader.version

    // Helper function to parse version strings into comparable lists
    def parseVersion = { String str -> str.tokenize('.+-').collect { token -> token.isNumber() ? token.toInteger() : token } }

    // Find the latest matching fabric-api version for the given Minecraft version
    def api = jdList.findAll {
        it.startsWith("fabric-api-") && it.endsWith("+${mcVersion}")
    }*.replace("fabric-api-", "")
            .max { a, b ->
                // Compare two version strings to determine which is newer
                def va = parseVersion(a)
                def vb = parseVersion(b)
                for (int i = 0; i < Math.max(va.size(), vb.size()); i++) {
                    def ai = i < va.size() ? va[i] : 0
                    def bi = i < vb.size() ? vb[i] : 0
                    if (ai instanceof Number && bi instanceof Number) {
                        if (ai != bi) return ai <=> bi
                    } else {
                        return ai.toString() <=> bi.toString()
                    }
                }
                return 0
            }

    // Return both loader and API version as a map
    return [loader: loader, api: api]
}

// Resolve the loader and API version for the current Minecraft version
// and store them in project properties for later use

def resolved = resolveFabricVersions(project.minecraft_version)
ext.loader_version = resolved.loader
ext.fabric_version = resolved.api

// -------------------- Dependencies --------------------
// Define all dependencies for the project, including annotation processors, Minecraft, mappings, loader, API, and runtime mods

dependencies {
    annotationProcessor libs.manifold // Manifold annotation processor
    minecraft "com.mojang:minecraft:${project.minecraft_version}" // Minecraft main dependency
    mappings loom.officialMojangMappings() // Official Mojang mappings
    modImplementation "net.fabricmc:fabric-loader:${loader_version}" // Fabric loader
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}" // Fabric API
    modRuntimeOnly(libs.devauth.fabric) // DevAuth runtime mod

    // Add SLF4J logging dependencies for Minecraft 1.16
    if (project.minecraft_version.startsWith("1.16")) {
        implementation libs.slf4j.api
        runtimeOnly libs.slf4j.simple
        println "📦 SLF4J enabled for Minecraft ${project.minecraft_version}"
    }
}

repositories {
    maven { url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" }
}


sourceSets {
    main {
        blossom {
            javaSources {
                property("COMMIT", System.getenv("GITHUB_SHA") ?: "LOCAL")
                property("BRANCH", System.getenv("GITHUB_REF") ?: "LOCAL")
                property("GROUP", project.group.toString())
                property("ARTIFACT", project.name)
                property("VERSION", project.version.toString())
                property("MC_VERSION", project.minecraft_version)
                property("VERSION_TYPE", project.hasProperty("version_type") ? project.version_type : "dev")
            }
        }
    }
}

def libs = project.extensions.findByType(VersionCatalogsExtension).named("libs")

manifold {
    manifoldVersion = libs.findVersion("manifold").get().requiredVersion
}

// -------------------- ShadowJar Configuration --------------------
// This block configures the shadowJar task to use the 'shadow' configuration.
shadowJar {
    configurations = [project.configurations.shadow]
}

// -------------------- Assemble Task Dependency --------------------
// Ensure that the assemble task depends on shadowJar so the shadow JAR is built automatically.
tasks.assemble.dependsOn tasks.shadowJar

// -------------------- Resource Processing --------------------
// This block expands variables in fabric.mod.json during the build process.
processResources {

    // Get all unique git authors for the authors field
    def authors = []
    def proc = "git log --format=%aN".execute()
    proc.in.eachLine { line ->
        def name = line.trim().replaceAll(/^'+|'+$/, "")
        if (name && !authors.contains(name)) {
            authors << name
        }
    }
    authors.sort()

    // Serialize authors array as JSON string for safe insertion
    def authorsJson = JsonOutput.toJson(authors)

    // Initialize contact as empty map, not closure!
    def contact = [:]
    if (project.hasProperty("homepage"))
        contact["homepage"] = project.homepage
    if (project.hasProperty("issues"))
        contact["issues"] = project.issues
    if (project.hasProperty("sources"))
        contact["sources"] = project.sources

    def contactJson = JsonOutput.toJson(contact)
    println "📜 Authors: ${authors.size()} unique contributors found."
    println "📞 Contact info: ${contactJson}"


    def custom = [:]
        def modmenu = [:]
            def modmenu_links = [:]
            if (project.hasProperty("discord"))
                modmenu_links["modmenu.discord"] = project.discord
        modmenu["links"] = modmenu_links
    custom["modmenu"] = modmenu

    def customJson = JsonOutput.toJson(custom)
    println "🔧 Custom data: ${customJson}"

    def entrypoints = [:]
    if (project.hasProperty("client_main_class")) {
        def clientEntrypoints = [project.client_main_class]
        entrypoints["client"] = clientEntrypoints
        println "👤 Client entrypoint: ${project.client_main_class}"
    }
    if (project.hasProperty("server_main_class")) {
        def serverEntrypoints = [project.server_main_class]
        entrypoints["server"] = serverEntrypoints
        println "👥 Server entrypoint: ${project.server_main_class}"
    }
    if (project.hasProperty("common_main_class")) {
        def commonEntrypoints = [project.common_main_class]
        entrypoints["common"] = commonEntrypoints
        println "🌐 Common entrypoint: ${project.common_main_class}"
    }

    def entrypointsJson = JsonOutput.toJson(entrypoints)
    println "📂 Entrypoints: ${entrypointsJson}"


    def enviroment = "*"
    if (project.hasProperty("client_main_class") && project.hasProperty("server_main_class")) {
        enviroment = "*"
    } else if (project.hasProperty("client_main_class")) {
        enviroment = "client"
    } else if (project.hasProperty("server_main_class")) {
        enviroment = "server"
    }
    println "🌍 Environment: ${enviroment}"


    // Use project.name for mod_id (lowercase), mod_name (title case), and icon_path if not set, empty string for others
    filesMatching("fabric.mod.json") {
        expand([
                "version"             : version,
                "mod_id"              : project.hasProperty("mod_id") ? project.mod_id : project.name.toLowerCase(),
                "mod_name"            : project.hasProperty("mod_name") ? project.mod_name : project.name.tokenize(' _-').collect { it.capitalize() }.join(' '),
                "description"         : project.hasProperty("description") ? project.description : "",
                "icon_path"           : project.hasProperty("icon_path") ? project.icon_path : "assets/${project.name}/icon.png",
                "minecraft_version"   : project.hasProperty("minecraft_version") ? project.minecraft_version : "",
                "fabricloader_version": project.hasProperty("loader_version") ? project.loader_version : "",
                "license_type"        : project.hasProperty("license_type") ? project.license_type : "",
                "authors"             : authorsJson, // Insert as JSON array string
                "contact"             : contactJson, // Insert as JSON object string
                "custom"              : customJson, // Insert custom data as JSON object string
                "java_version"        : effectiveJavaVersion.majorVersion,
                "environment"         : project.hasProperty("environment") ? project.environment : enviroment,
                "entrypoints"         : entrypointsJson
        ])
    }

    // Dynamically set compatibilityLevel in mod-template.mixins.json based on effectiveJavaVersion
    filesMatching("mod-template.mixins.json") {
        expand([
                "compatibilityLevel": "JAVA_${effectiveJavaVersion.majorVersion}"
        ])
    }
}

// Nach processResources Task: fabric.mod.json ausgeben
tasks.named("processResources").configure {
    doLast {
        def modJsonFile = file("build/resources/main/fabric.mod.json")
        println "----- fabric.mod.json -----"
        println modJsonFile.text
        println "--------------------------"
    }
}

// -------------------- Java Configuration --------------------
// Configure Java compilation settings and source JAR generation.
java {
    withSourcesJar() // Also generate a sources JAR for IDEs and publishing
    targetCompatibility = effectiveJavaVersion // Set Java target compatibility based on Minecraft version
}

jar {
    inputs.property "archivesName", project.base.archivesName
    from("LICENSE.md") { rename { "${it}_${inputs.properties.archivesName}" } }
}

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }
    repositories {
        // Define publishing destinations here
    }
}

remapJar {
    dependsOn shadowJar
    inputFile = shadowJar.archiveFile.get()
    archiveFileName = "${project.archives_base_name}-${version}.jar"
}

def changelogFile = file("changelog.md")
def changelogText = changelogFile.exists() ? changelogFile.text : "No changelog found."
println "🔄 Changelog:\n${changelogText}"

modrinth {
    debugMode = project.hasProperty("debug") && project.debug == "true"
    syncBodyFrom = rootProject.file("README.md").text
    token = System.getenv("MODRINTH_TOKEN")
    projectId = project.modrinth_projectId
    versionNumber = version
    versionName = "${archives_base_name}-${minecraft_version}+${version}"
    versionType = project.hasProperty("version_type") ? project.version_type : "release"
    uploadFile = remapJar
    gameVersions = ["${project.minecraft_version}"]
    loaders = ["fabric"]
    dependencies {
        required.project "fabric-api"
    }
    changelog = changelogText
}

task updateAuthors {
    doLast {
        def authors = []
        def proc = "git log --format=%aN".execute() // without single quotes
        proc.in.eachLine { line ->
            def name = line.trim().replaceAll(/^'+|'+$/, "") // removes leading and trailing '
            if (name && !authors.contains(name)) {
                authors << name
            }
        }
        authors.sort()
        def jsonFile = file("src/main/resources/fabric.mod.json")
        def json = new JsonSlurper().parse(jsonFile)
        json.authors = authors
        jsonFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(json))
        println "Authors updated: " + authors
    }
}
