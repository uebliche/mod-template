name: Release
on:
  workflow_dispatch: {}
permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create date-based tag
        id: tag
        run: |
          DATE=$(date +'%Y.%m.%d')
          TAG=$DATE
          LETTER=a
          EXISTING=$(git tag --list "$DATE*")
          if [[ -n "$EXISTING" ]]; then
          while echo "$EXISTING" | grep -q "^$TAG$"; do
          TAG="${DATE}${LETTER}"
          LETTER=$(echo "$LETTER" | tr "0-9a-y" "1-9a-z")
          done
          fi
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag $TAG
          git push origin $TAG
          echo "Using tag: $TAG"
          echo "TAG=$TAG" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: '.github/changelog-configuration.json'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.TAG }}
          name: Release ${{ steps.tag.outputs.TAG }}
          body: ${{ steps.changelog.outputs.changelog }}
          generate_release_notes: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - name: Parse Versions
        id: set-matrix
        run: |
          MIN_VERSION=$(grep '^buildFromVersion=' gradle.properties | cut -d'=' -f2)
          curl -s https://meta.fabricmc.net/v2/versions/game > versions.json
          curl -s https://maven.fabricmc.net/jdlist.txt > jdlist.txt
          VERSIONS=$(jq -r '.[] | select(.stable == true) | .version' versions.json | sort -V | awk -v min="$MIN_VERSION" '{ if ($1 >= min) print $1 }')
          FABRIC_API_MC_VERSIONS=$(grep -oP 'fabric-api-[^+]+?\+[0-9]+\.[0-9]+(\.[0-9]+)?' jdlist.txt | sort -V | uniq)
          FINAL_VERSIONS=$(comm -12 <(echo "$VERSIONS") <(echo "$FABRIC_API_MC_VERSIONS") | jq -R -s -c 'split("\n")[:-1]')
          echo "matrix=$FINAL_VERSIONS" >> $GITHUB_OUTPUT

  build:
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        mc_version: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    name: Build ${{ matrix.mc_version }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Build
        run: ./gradlew build remapJar -Pminecraft_version=${{ matrix.mc_version }} -Ptag=${{ needs.release.outputs.TAG || env.TAG }}
      - name: Upload remapped jar to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.release.outputs.TAG || env.TAG }}
          files: build/libs/${{ env.ARCHIVES_BASE_NAME }}-${{ needs.release.outputs.TAG || env.TAG }}-*.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish to Modrinth
        env:
          MODRINTH_TOKEN: ${{ secrets.MODRINTH_TOKEN }}
          GITHUB_SHA: ${{ github.sha }}
        run: ./gradlew modrinth -Pminecraft_version=${{ matrix.mc_version }} -Ptag=${{ needs.release.outputs.TAG || env.TAG }}

  update-description:
    runs-on: ubuntu-latest
    needs: release
    steps:
      - uses: actions/checkout@v3
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Update Description
        env:
          MODRINTH_TOKEN: ${{ secrets.MODRINTH_TOKEN }}
        run: ./gradlew modrinthSyncBody
