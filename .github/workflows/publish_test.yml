name: Publish TEST
on:
  workflow_dispatch:
    inputs:
      version_type:
        type: choice
        description: Version Type
        options:
          - release
          - beta
          - alpha
      debug:
        type: boolean
        description: Debug build
        default: false
      version:
        type: string
        description: Version to build (only for single version builds)
        default: ''
      only_description:
        type: boolean
        description: Only update the description on Modrinth
        default: false

permissions:
  contents: write
  pull-requests: read

env:
  DEBUG: ${{ github.event.inputs.debug }}
  VERSION_TYPE: ${{ github.event.inputs.version_type }}

jobs:
  release:
    if: ${{ github.event.inputs.only_description != 'true' }}
    runs-on: ubuntu-latest
    outputs:
      TAG: ${{ steps.tag.outputs.TAG }}
      NOTES: ${{ steps.get_release_notes.outputs.notes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Create unique tag for release
        id: tag
        run: |
          DATE=$(date +'%Y.%m.%d')
          TAGS=$(git tag --list "${DATE}*")
          echo "Existing tags: $TAGS"
          
          if [ -z "$TAGS" ]; then
          VERSION="$DATE"
          else
          SUFFIXES=$(echo "$TAGS" | sed -n "s/^$DATE\([a-z]\).*$/\1/p")
          NEXT_SUFFIX="b"
          if [ -n "$SUFFIXES" ]; then
          LAST_SUFFIX=$(echo "$SUFFIXES" | sort | tail -n1)
          NEXT_SUFFIX=$(printf "\\$(printf '%03o' $(( $(printf '%d' "'$LAST_SUFFIX") + 1 )) )")
          fi
          VERSION="${DATE}${NEXT_SUFFIX}"
          fi
          
          BRANCH="${GITHUB_REF##*/}"
          if [ "$BRANCH" != "main" ]; then
          VERSION="${VERSION}-${BRANCH}"
          fi
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "$VERSION"
          git push origin "$VERSION"
          echo "TAG=$VERSION" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Version: ${VERSION}" >> $GITHUB_STEP_SUMMARY

      - name: Get previous tag
        id: prevtag
        run: |
          PREV_TAG=$(git tag --sort=-creatordate | grep -v "^${{ steps.tag.outputs.TAG }}$" | head -n1)
          echo "previous_tag=$PREV_TAG" >> $GITHUB_OUTPUT
          echo "Previous tag: ${PREV_TAG}" >> $GITHUB_STEP_SUMMARY

      - name: Show recent commits and tags
        run: |
          echo "Tags (sorted by creation date):"
          git tag --sort=-creatordate
          echo ""
          echo "Last 20 commits (with tags and branches):"
          git log --oneline --decorate --graph -20

      - name: Debug Tags and Commits
        run: |
          git tag --sort=-creatordate
          git log --oneline --decorate --graph -20

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.TAG }}
          generate_release_notes: true
      - name: Get GitHub Release Notes
        id: get_release_notes
        run: |
          NOTES=$(gh api /repos/${{ github.repository }}/releases/tags/${{ steps.tag.outputs.TAG }} --jq '.body')
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  generate-matrix:
    if: ${{ github.event.inputs.only_description != 'true' }}
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - name: Parse Versions
        id: set-matrix
        run: |
          MIN_VERSION=$(grep '^buildFromVersion=' gradle.properties | cut -d'=' -f2)
          curl -s https://meta.fabricmc.net/v2/versions/game > versions.json
          curl -s https://maven.fabricmc.net/jdlist.txt > jdlist.txt
          VERSIONS=$(jq -r '.[] | select(.stable == true) | .version' versions.json | sort -V | awk -v min="$MIN_VERSION" '{ if ($1 >= min) print $1 }')
          # Extract only the MC version from jdlist.txt (after the last '+')
          FABRIC_API_MC_VERSIONS=$(grep -oP 'fabric-api-[^+]+?\+\K[0-9]+\.[0-9]+(\.[0-9]+)?' jdlist.txt | sort -V | uniq)
          FINAL_VERSIONS=$(comm -12 <(echo "$VERSIONS") <(echo "$FABRIC_API_MC_VERSIONS") | jq -R -s -c 'split("\n")[:-1]')
          echo "matrix=$FINAL_VERSIONS" >> $GITHUB_OUTPUT
          echo "DEBUG: VERSIONS=$VERSIONS"  # Debug output
          echo "DEBUG: FABRIC_API_MC_VERSIONS=$FABRIC_API_MC_VERSIONS"  # Debug output
          echo "DEBUG: FINAL_VERSIONS=$FINAL_VERSIONS"  # Debug output

  build:
    needs: [ generate-matrix, release ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        mc_version: ${{ github.event.inputs.version != '' && fromJson(format('["{0}"]', github.event.inputs.version)) || fromJson(needs.generate-matrix.outputs.matrix) }}
    name: Build ${{ matrix.mc_version }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build
        run: ./gradlew build remapJar -Pminecraft_version=${{ matrix.mc_version }} -Ptag=${{ needs.release.outputs.TAG }} -Pversion_type=${{ github.event.inputs.version_type }} -Pdebug=${{ github.event.inputs.debug }}

      - name: Upload remapped jar to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.release.outputs.TAG }}
          files: build/libs/${{ env.ARCHIVES_BASE_NAME }}-${{ needs.release.outputs.TAG }}-*.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to Modrinth
        env:
          MODRINTH_TOKEN: ${{ secrets.MODRINTH_TOKEN }}
          GITHUB_SHA: ${{ github.sha }}
          CHANGELOG: ${{ needs.release.outputs.notes }}
        run: ./gradlew modrinth -Pminecraft_version=${{ matrix.mc_version }} -Ptag=${{ needs.release.outputs.TAG }} -Pversion_type=${{ github.event.inputs.version_type }} -Pdebug=${{ github.event.inputs.debug }}

  update-description:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Update Description
        env:
          MODRINTH_TOKEN: ${{ secrets.MODRINTH_TOKEN }}
        run: ./gradlew modrinthSyncBody -Pdebug=${{ github.event.inputs.debug }}
